/**
 * PipedriveAPIV1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.MailThreadsController;
const MailThread = testerlib.MailThread;
const FolderEnum = testerlib.FolderEnum;
const MailThreadDelete = testerlib.MailThreadDelete;
const MailThreadOne = testerlib.MailThreadOne;
const MailThreadPut = testerlib.MailThreadPut;
const NumberBooleanEnum = testerlib.NumberBooleanEnum;
const MailThreadMessages = testerlib.MailThreadMessages;

describe("MailThreadsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Returns mail threads in specified folder ordered by most recent message within.
     */
    it("should testTestGetMailThreads response", function testTestGetMailThreadsTest(done) {
        // parameters for the API call
        let input = [];
        input['folder'] = FolderEnum.inbox;
        input['start'] = 0;
        input['limit'] = null;

        controller.getMailThreads(input, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = 'application/json';
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {"status": "ok", "success": true, "data": [{"id": 1, "parties": {"to": [{"id": 2, "name": "", "latest_sent": false, "email_address": "example@test.com", "message_time": 1574677850000, "linked_person_id": 3, "linked_person_name": "Tester", "linked_organization_id": null, "mail_message_party_id": 5318}], "from": [{"id": 3, "name": "", "latest_sent": false, "email_address": "example@test.com", "message_time": 1574677850000, "linked_person_id": 2, "linked_person_name": "Tester", "linked_organization_id": null, "mail_message_party_id": 5318}]}, "drafts_parties": [], "folders": ["inbox"], "account_id": "123412jhfsaa221", "user_id": 232, "version": 9, "subject": "Example", "snippet": "Example Snippet", "snippet_draft": null, "snippet_sent": "", "has_attachments_flag": 1, "has_inline_attachments_flag": 1, "has_real_attachments_flag": 0, "has_draft_flag": 0, "has_sent_flag": 0, "archived_flag": 0, "deleted_flag": 0, "shared_flag": 1, "synced_flag": 1, "external_deleted_flag": 0, "smart_bcc_flag": 0, "first_message_to_me_flag": 1, "mail_link_tracking_enabled_flag": 0, "last_message_timestamp": "2019-11-20T20: 20: 46.000Z", "first_message_timestamp": "2019-11-20T17: 40: 46.000Z", "last_message_sent_timestamp": null, "last_message_received_timestamp": "2019-11-20T20: 20: 46.000Z", "add_time": "2019-11-20T17: 40: 59.000Z", "update_time": "2019-11-20T20: 21: 22.000Z", "deal_id": null, "deal_status": null, "write_flag": true, "all_messages_sent_flag": 0}]}, false, true, false));
            done();
        }).catch(() => undefined);
    });

});
