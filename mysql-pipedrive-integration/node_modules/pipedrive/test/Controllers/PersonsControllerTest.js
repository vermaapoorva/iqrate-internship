/**
 * PipedriveAPIV1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const config = require("../../lib/configuration");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.PersonsController;
const NumberBooleanEnum = testerlib.NumberBooleanEnum;
const VisibleToEnum = testerlib.VisibleToEnum;
const Status2Enum = testerlib.Status2Enum;

describe("PersonsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Marks multiple persons as deleted.
     */
    it("should testTestDeleteMultiplePersonsInBulk response", function testTestDeleteMultiplePersonsInBulkTest(done) {
        // parameters for the API call
        let ids = null;

        controller.deleteMultiplePersonsInBulk(ids, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * Returns all persons
     */
    it("should testTestGetAllPersons response", function testTestGetAllPersonsTest(done) {
        // parameters for the API call
        let input = [];
        input['userId'] = null;
        input['filterId'] = null;
        input['firstChar'] = null;
        input['start'] = 0;
        input['limit'] = null;
        input['sort'] = null;

        controller.getAllPersons(input, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for 'key' values.
     */
    it("should testTestAddAPerson response", function testTestAddAPersonTest(done) {
        // parameters for the API call
        let input = [];
        input['contentType'] = null;
        input['body'] = null;

        controller.addAPerson(input, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

});
