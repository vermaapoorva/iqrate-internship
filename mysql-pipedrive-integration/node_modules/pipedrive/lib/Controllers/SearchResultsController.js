/**
 * PipedriveAPIV1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');
const _oAuthManager = require('../OAuthManager');

class SearchResultsController {
    /**
     * Performs a search across the account and returns SearchResults.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['term'] Search term to look for, minimum 2 characters.
     * @param {ItemType2Enum} input['itemType'] (optional) Search for items of exact type. If
     * omitted, all types of items are searched.
     * @param {double} input['start'] (optional) Pagination start
     * @param {double} input['limit'] (optional) Items shown per page
     * @param {NumberBooleanEnum} input['exactMatch'] (optional) When enabled, only full exact
     * matches against the given term are returned.
     * The minimum 2 character limit for the term is
     * discarded when exact_match is enabled. It
     * will only work if search term is 30
     * characters or less.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getPerformASearch(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/searchResults';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            term: input.term,
            item_type: (input.itemType !== null) ? input.itemType : null,
            start: (input.start !== null) ? input.start : 0,
            limit: input.limit,
            exact_match: (input.exactMatch !== null) ? input.exactMatch : null,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return SearchResultsController.getPerformASearchAction(_queryUrl, _callback, input);
        }
        return _oAuthManager.authorize().then(
            () => SearchResultsController.getPerformASearchAction(_queryUrl, _callback, input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static getPerformASearchAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Performs a search from a specific field's values. Results can be either the distinct
     * values of the field (useful for searching autocomplete field values), or actual items IDs
     * (deals, persons, organizations or products). Works only with the following field types:
     * varchar, varchar_auto, double, address, text, phone, date.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['term'] Search term to look for, minimum 2 characters.
     * @param {FieldType6Enum} input['fieldType'] Type of the field to perform the search from.
     * @param {string} input['fieldKey'] Key of the field to search from. Field key can be obtained
     * by fetching the list of fields using any of fields API GET
     * methods (dealFields, personFields, ..).
     * @param {NumberBooleanEnum} input['exactMatch'] (optional) When enabled, only full exact
     * matches against the given term are returned.
     * By default, term can be present anywhere in
     * the resulting field values to be considered a
     * match. The minimum 2 character limit for the
     * term is discarded when exact_match is enabled.
     * @param {string} input['returnFieldKey'] (optional) Name of the field in search results from
     * which the search was performed. When omitted,
     * 'value' will be used. You may want to set this
     * parameter to match the field_key.
     * @param {NumberBooleanEnum} input['returnItemIds'] (optional) Whether to return matching
     * items IDs in search results. When omitted
     * or set to 0, only distinct values of the
     * searched field are returned. When enabled,
     * the return_field_key parameter is ignored
     * and the results include the searched field
     * as its own key.
     * @param {double} input['start'] (optional) Pagination start
     * @param {double} input['limit'] (optional) Items shown per page
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getPerformASearchUsingASpecificFieldValue(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/searchResults/field';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            term: input.term,
            field_type: (input.fieldType !== null) ? input.fieldType : null,
            field_key: input.fieldKey,
            exact_match: (input.exactMatch !== null) ? input.exactMatch : null,
            return_field_key: input.returnFieldKey,
            return_item_ids: (input.returnItemIds !== null) ? input.returnItemIds : null,
            start: (input.start !== null) ? input.start : 0,
            limit: input.limit,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return SearchResultsController.getPerformASearchUsingASpecificFieldValueAction(
                _queryUrl,
                _callback,
                input);
        }
        return _oAuthManager.authorize().then(
            () => SearchResultsController.getPerformASearchUsingASpecificFieldValueAction(
                _queryUrl,
                _callback,
                input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static getPerformASearchUsingASpecificFieldValueAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
}
module.exports = SearchResultsController;
