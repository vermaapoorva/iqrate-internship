/**
 * PipedriveAPIV1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');
const _oAuthManager = require('../OAuthManager');

class NotesController {
    /**
     * Returns all notes.
     *
     * @param  {array}  input    Array with all options for search
     * @param {int} input['userId'] (optional) ID of the user whose notes to fetch. If omitted,
     * notes by all users will be returned.
     * @param {int} input['dealId'] (optional) ID of the deal which notes to fetch. If omitted,
     * notes about all deals with be returned.
     * @param {int} input['personId'] (optional) ID of the person whose notes to fetch. If omitted,
     * notes about all persons with be returned.
     * @param {int} input['orgId'] (optional) ID of the organization which notes to fetch. If
     * omitted, notes about all organizations with be returned.
     * @param {double} input['start'] (optional) Pagination start
     * @param {double} input['limit'] (optional) Items shown per page
     * @param {string} input['sort'] (optional) Field names and sorting mode separated by a comma
     * (field_name_1 ASC, field_name_2 DESC). Only first-level field
     * keys are supported (no nested keys). Supported fields: id,
     * user_id, deal_id, person_id, org_id, content, add_time,
     * update_time.
     * @param {date} input['startDate'] (optional) Date in format of YYYY-MM-DD from which notes to
     * fetch from.
     * @param {date} input['endDate'] (optional) Date in format of YYYY-MM-DD until which notes to
     * fetch to.
     * @param {NumberBooleanEnum} input['pinnedToDealFlag'] (optional) If set, then results are
     * filtered by note to deal pinning state.
     * @param {NumberBooleanEnum} input['pinnedToOrganizationFlag'] (optional) If set, then results
     * are filtered by note to
     * organization pinning state.
     * @param {NumberBooleanEnum} input['pinnedToPersonFlag'] (optional) If set, then results are
     * filtered by note to person pinning
     * state.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAllNotes(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/notes';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            user_id: input.userId,
            deal_id: input.dealId,
            person_id: input.personId,
            org_id: input.orgId,
            start: (input.start !== null) ? input.start : 0,
            limit: input.limit,
            sort: input.sort,
            start_date: _apiHelper.stringifyDateTime(input.startDate, 'date'),
            end_date: _apiHelper.stringifyDateTime(input.endDate, 'date'),
            pinned_to_deal_flag: (input.pinnedToDealFlag !== null) ? input.pinnedToDealFlag : null,
            pinned_to_organization_flag: (input.pinnedToOrganizationFlag !== null) ? input.pinnedToOrganizationFlag : null,
            pinned_to_person_flag: (input.pinnedToPersonFlag !== null) ? input.pinnedToPersonFlag : null,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return NotesController.getAllNotesAction(_queryUrl, _callback, input);
        }
        return _oAuthManager.authorize().then(
            () => NotesController.getAllNotesAction(_queryUrl, _callback, input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static getAllNotesAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'GetNotes');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Adds a new note.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['content'] Content of the note in HTML format. Subject to sanitization
     * on the back-end.
     * @param {int} input['userId'] (optional) ID of the user who will be marked as the author of
     * this note. Only an admin can change the author.
     * @param {int} input['dealId'] (optional) ID of the deal the note will be attached to.
     * @param {int} input['personId'] (optional) ID of the person this note will be attached to.
     * @param {int} input['orgId'] (optional) ID of the organization this note will be attached to.
     * @param {string} input['addTime'] (optional) Optional creation date & time of the Note in UTC.
     * Can be set in the past or in the future. Requires admin
     * user API token. Format: YYYY-MM-DD HH:MM:SS
     * @param {NumberBooleanEnum} input['pinnedToDealFlag'] (optional) If set, then results are
     * filtered by note to deal pinning state
     * (deal_id is also required).
     * @param {NumberBooleanEnum} input['pinnedToOrganizationFlag'] (optional) If set, then results
     * are filtered by note to
     * organization pinning state
     * (org_id is also required).
     * @param {NumberBooleanEnum} input['pinnedToPersonFlag'] (optional) If set, then results are
     * filtered by note to person pinning
     * state (person_id is also required).
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static addANote(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/notes';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return NotesController.addANoteAction(_queryUrl, _callback, input);
        }
        return _oAuthManager.authorize().then(
            () => NotesController.addANoteAction(_queryUrl, _callback, input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static addANoteAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // prepare form data
        const _form = {
            content: input.content,
            user_id: input.userId,
            deal_id: input.dealId,
            person_id: input.personId,
            org_id: input.orgId,
            add_time: input.addTime,
            pinned_to_deal_flag: (input.pinnedToDealFlag !== null) ? input.pinnedToDealFlag : null,
            pinned_to_organization_flag: (input.pinnedToOrganizationFlag !== null) ? input.pinnedToOrganizationFlag : null,
            pinned_to_person_flag: (input.pinnedToPersonFlag !== null) ? input.pinnedToPersonFlag : null,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'PostNote');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Deletes a specific note.
     *
     * @param {double} id ID of the note
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteANote(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/notes/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return NotesController.deleteANoteAction(_queryUrl, _callback);
        }
        return _oAuthManager.authorize().then(
            () => NotesController.deleteANoteAction(_queryUrl, _callback),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static deleteANoteAction(_queryUrl, _callback) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'DeleteNote');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Returns details about a specific note.
     *
     * @param {double} id ID of the note
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getOneNote(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/notes/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return NotesController.getOneNoteAction(_queryUrl, _callback);
        }
        return _oAuthManager.authorize().then(
            () => NotesController.getOneNoteAction(_queryUrl, _callback),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static getOneNoteAction(_queryUrl, _callback) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'PostNote');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Updates a note.
     *
     * @param  {array}  input    Array with all options for search
     * @param {double} input['id'] ID of the note
     * @param {string} input['content'] Content of the note in HTML format. Subject to sanitization
     * on the back-end.
     * @param {int} input['userId'] (optional) ID of the user who will be marked as the author of
     * this note. Only an admin can change the author.
     * @param {int} input['dealId'] (optional) ID of the deal the note will be attached to.
     * @param {int} input['personId'] (optional) ID of the person this note will be attached to.
     * @param {int} input['orgId'] (optional) ID of the organization this note will be attached to.
     * @param {string} input['addTime'] (optional) Optional creation date & time of the Note in UTC.
     * Can be set in the past or in the future. Requires admin
     * user API token. Format: YYYY-MM-DD HH:MM:SS
     * @param {NumberBooleanEnum} input['pinnedToDealFlag'] (optional) If set, then results are
     * filtered by note to deal pinning state
     * (deal_id is also required).
     * @param {NumberBooleanEnum} input['pinnedToOrganizationFlag'] (optional) If set, then results
     * are filtered by note to
     * organization pinning state
     * (org_id is also required).
     * @param {NumberBooleanEnum} input['pinnedToPersonFlag'] (optional) If set, then results are
     * filtered by note to person pinning
     * state (person_id is also required).
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateANote(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/notes/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id: input.id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return NotesController.updateANoteAction(_queryUrl, _callback, input);
        }
        return _oAuthManager.authorize().then(
            () => NotesController.updateANoteAction(_queryUrl, _callback, input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static updateANoteAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // prepare form data
        const _form = {
            content: input.content,
            user_id: input.userId,
            deal_id: input.dealId,
            person_id: input.personId,
            org_id: input.orgId,
            add_time: input.addTime,
            pinned_to_deal_flag: (input.pinnedToDealFlag !== null) ? input.pinnedToDealFlag : null,
            pinned_to_organization_flag: (input.pinnedToOrganizationFlag !== null) ? input.pinnedToOrganizationFlag : null,
            pinned_to_person_flag: (input.pinnedToPersonFlag !== null) ? input.pinnedToPersonFlag : null,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            form: _form,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'PostNote');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
}
module.exports = NotesController;
