/**
 * PipedriveAPIV1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');
const _oAuthManager = require('../OAuthManager');

class ActivitiesController {
    /**
     * Marks multiple activities as deleted.
     *
     * @param {string} ids Comma-separated IDs that will be deleted
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteMultipleActivitiesInBulk(ids, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/activities';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            ids,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return ActivitiesController.deleteMultipleActivitiesInBulkAction(
                _queryUrl,
                _callback,
                ids);
        }
        return _oAuthManager.authorize().then(
            () => ActivitiesController.deleteMultipleActivitiesInBulkAction(
                _queryUrl,
                _callback,
                ids),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static deleteMultipleActivitiesInBulkAction(_queryUrl, _callback, ids) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Returns all activities assigned to a particular user.
     *
     * @param  {array}  input    Array with all options for search
     * @param {double} input['userId'] (optional) ID of the user whose activities will be fetched.
     * If omitted, the user associated with the API token will be
     * used. If 0, activities for all company users will be fetched
     * based on the permission sets.
     * @param {double} input['filterId'] (optional) ID of the filter to use (will narrow down
     * results if used together with user_id parameter).
     * @param {string} input['type'] (optional) Type of the activity, can be one type or multiple
     * types separated by a comma. This is in correlation with the
     * key_string parameter of ActivityTypes.
     * @param {double} input['start'] (optional) Pagination start
     * @param {double} input['limit'] (optional) Items shown per page
     * @param {date} input['startDate'] (optional) Date in format of YYYY-MM-DD from which
     * activities to fetch from.
     * @param {date} input['endDate'] (optional) Date in format of YYYY-MM-DD until which
     * activities to fetch to.
     * @param {NumberBooleanEnum} input['done'] (optional) Whether the activity is done or not. 0 =
     * Not done, 1 = Done. If omitted returns both Done
     * and Not done activities.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAllActivitiesAssignedToAParticularUser(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/activities';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            user_id: input.userId,
            filter_id: input.filterId,
            type: input.type,
            start: (input.start !== null) ? input.start : 0,
            limit: input.limit,
            start_date: _apiHelper.stringifyDateTime(input.startDate, 'date'),
            end_date: _apiHelper.stringifyDateTime(input.endDate, 'date'),
            done: (input.done !== null) ? input.done : null,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return ActivitiesController.getAllActivitiesAssignedToAParticularUserAction(
                _queryUrl,
                _callback,
                input);
        }
        return _oAuthManager.authorize().then(
            () => ActivitiesController.getAllActivitiesAssignedToAParticularUserAction(
                _queryUrl,
                _callback,
                input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static getAllActivitiesAssignedToAParticularUserAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Adds a new activity. Includes more_activities_scheduled_in_context property in response's
     * additional_data which indicates whether there are more undone activities scheduled with
     * the same deal, person or organization (depending on the supplied data). For more
     * information on how to add an activity, see <a href="https://pipedrive.readme.
     * io/docs/adding-an-activity" target="_blank" rel="noopener noreferrer">this tutorial</a>.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['subject'] Subject of the activity
     * @param {string} input['type'] Type of the activity. This is in correlation with the
     * key_string parameter of ActivityTypes.
     * @param {NumberBooleanEnum} input['done'] (optional) TODO: type description here
     * @param {date} input['dueDate'] (optional) Due date of the activity. Format: YYYY-MM-DD
     * @param {string} input['dueTime'] (optional) Due time of the activity in UTC. Format: HH:MM
     * @param {string} input['duration'] (optional) Duration of the activity. Format: HH:MM
     * @param {int} input['userId'] (optional) ID of the user whom the activity will be assigned to.
     * If omitted, the activity will be assigned to the authorized
     * user.
     * @param {int} input['dealId'] (optional) ID of the deal this activity will be associated
     * with
     * @param {int} input['personId'] (optional) ID of the person this activity will be associated
     * with
     * @param {string} input['participants'] (optional) List of multiple persons (participants)
     * this activity will be associated with. If omitted,
     * single participant from person_id field is used. It
     * requires a structure as follows: [{"person_id":1,
     * "primary_flag":true}]
     * @param {int} input['orgId'] (optional) ID of the organization this activity will be
     * associated with
     * @param {string} input['note'] (optional) Note of the activity (HTML format)
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static addAnActivity(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/activities';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return ActivitiesController.addAnActivityAction(_queryUrl, _callback, input);
        }
        return _oAuthManager.authorize().then(
            () => ActivitiesController.addAnActivityAction(_queryUrl, _callback, input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static addAnActivityAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // prepare form data
        const _form = {
            subject: input.subject,
            type: input.type,
            done: (input.done !== null) ? input.done : null,
            due_date: _apiHelper.stringifyDateTime(input.dueDate, 'date'),
            due_time: input.dueTime,
            duration: input.duration,
            user_id: input.userId,
            deal_id: input.dealId,
            person_id: input.personId,
            participants: input.participants,
            org_id: input.orgId,
            note: input.note,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Deletes an activity.
     *
     * @param {double} id ID of the activity
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteAnActivity(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/activities/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return ActivitiesController.deleteAnActivityAction(_queryUrl, _callback);
        }
        return _oAuthManager.authorize().then(
            () => ActivitiesController.deleteAnActivityAction(_queryUrl, _callback),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static deleteAnActivityAction(_queryUrl, _callback) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Returns details of a specific activity.
     *
     * @param {double} id ID of the activity
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getDetailsOfAnActivity(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/activities/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return ActivitiesController.getDetailsOfAnActivityAction(_queryUrl, _callback);
        }
        return _oAuthManager.authorize().then(
            () => ActivitiesController.getDetailsOfAnActivityAction(_queryUrl, _callback),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static getDetailsOfAnActivityAction(_queryUrl, _callback) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Modifies an activity. Includes more_activities_scheduled_in_context property in response's
     * additional_data which indicates whether there are more undone activities scheduled with
     * the same deal, person or organization (depending on the supplied data).
     *
     * @param  {array}  input    Array with all options for search
     * @param {double} input['id'] ID of the activity
     * @param {string} input['subject'] Subject of the activity
     * @param {string} input['type'] Type of the activity. This is in correlation with the
     * key_string parameter of ActivityTypes.
     * @param {NumberBooleanEnum} input['done'] (optional) TODO: type description here
     * @param {date} input['dueDate'] (optional) Due date of the activity. Format: YYYY-MM-DD
     * @param {string} input['dueTime'] (optional) Due time of the activity in UTC. Format: HH:MM
     * @param {string} input['duration'] (optional) Duration of the activity. Format: HH:MM
     * @param {int} input['userId'] (optional) ID of the user whom the activity will be assigned to.
     * If omitted, the activity will be assigned to the authorized
     * user.
     * @param {int} input['dealId'] (optional) ID of the deal this activity will be associated
     * with
     * @param {int} input['personId'] (optional) ID of the person this activity will be associated
     * with
     * @param {string} input['participants'] (optional) List of multiple persons (participants)
     * this activity will be associated with. If omitted,
     * single participant from person_id field is used. It
     * requires a structure as follows: [{"person_id":1,
     * "primary_flag":true}]
     * @param {int} input['orgId'] (optional) ID of the organization this activity will be
     * associated with
     * @param {string} input['note'] (optional) Note of the activity (HTML format)
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateEditAnActivity(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/activities/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id: input.id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return ActivitiesController.updateEditAnActivityAction(_queryUrl, _callback, input);
        }
        return _oAuthManager.authorize().then(
            () => ActivitiesController.updateEditAnActivityAction(_queryUrl, _callback, input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static updateEditAnActivityAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // prepare form data
        const _form = {
            subject: input.subject,
            type: input.type,
            done: (input.done !== null) ? input.done : null,
            due_date: _apiHelper.stringifyDateTime(input.dueDate, 'date'),
            due_time: input.dueTime,
            duration: input.duration,
            user_id: input.userId,
            deal_id: input.dealId,
            person_id: input.personId,
            participants: input.participants,
            org_id: input.orgId,
            note: input.note,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            form: _form,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const parsed = JSON.parse(_response.body);
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
}
module.exports = ActivitiesController;
