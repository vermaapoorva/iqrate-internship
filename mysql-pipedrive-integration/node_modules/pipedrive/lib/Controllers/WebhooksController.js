/**
 * PipedriveAPIV1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');
const _oAuthManager = require('../OAuthManager');

class WebhooksController {
    /**
     * Returns data about all webhooks of a company.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAllWebhooks(callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/webhooks';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return WebhooksController.getAllWebhooksAction(_queryUrl, _callback);
        }
        return _oAuthManager.authorize().then(
            () => WebhooksController.getAllWebhooksAction(_queryUrl, _callback),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static getAllWebhooksAction(_queryUrl, _callback) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    let response = '';
                    if (_context.response.body) {
                        response = JSON.parse(_context.response.body);
                    }
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'WebhooksResponse');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else if (_response.statusCode === 401) {
                        const mappedObject = _baseController.getObjectMapper()
                            .mapObject(response, 'UnauthorizedException');
                        mappedObject.reason = 'Unauthorized response';
                        mappedObject.context = _context;
                        const _err = { errorMessage: 'Unauthorized response',
                            errorCode: 401,
                            errorResponse: mappedObject };
                        _callback(_err, null, _context);
                        _reject(_err);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Creates a new webhook and returns its details. Note that specifying an event which
     * triggers the webhook combines 2 parameters - 'event_action' and 'event_object'. E.g., use
     * '\*.\*' for getting notifications about all events, 'added.deal' for any newly added deals,
     * 'deleted.persons' for any deleted persons, etc. See <a href="https://pipedrive.readme.
     * io/docs/guide-for-webhooks?utm_source=api_reference">https://pipedrive.readme.
     * io/docs/guide-for-webhooks</a> for more details.
     *
     * @param  {array}  input    Array with all options for search
     * @param {string} input['subscriptionUrl'] A full, valid, publicly accessible URL. Determines
     * where to send the notifications. Please note that
     * you cannot use Pipedrive API endpoints as the
     * subscription_url.
     * @param {EventActionEnum} input['eventAction'] Type of action to receive notifications about.
     * Wildcard will match all supported actions.
     * @param {EventObjectEnum} input['eventObject'] Type of object to receive notifications about.
     * Wildcard will match all supported objects.
     * @param {int} input['userId'] (optional) The ID of the user this webhook will be authorized
     * with. If not set, current authorized user will be used. Note
     * that this does not filter only certain user's events â€” rather,
     * this specifies the user's permissions under which each event is
     * checked. Events about objects the selected user is not entitled
     * to access are not sent. If you want to receive notifications
     * for all events, a top-level admin user should be used.
     * @param {string} input['httpAuthUser'] (optional) HTTP basic auth username of the
     * subscription URL endpoint (if required).
     * @param {string} input['httpAuthPassword'] (optional) HTTP basic auth password of the
     * subscription URL endpoint (if required).
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createANewWebhook(input, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        const _pathUrl = '/webhooks';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return WebhooksController.createANewWebhookAction(_queryUrl, _callback, input);
        }
        return _oAuthManager.authorize().then(
            () => WebhooksController.createANewWebhookAction(_queryUrl, _callback, input),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static createANewWebhookAction(_queryUrl, _callback, input) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // prepare form data
        const _form = {
            subscription_url: input.subscriptionUrl,
            event_action: (input.eventAction !== null) ? input.eventAction : null,
            event_object: (input.eventObject !== null) ? input.eventObject : null,
            user_id: input.userId,
            http_auth_user: input.httpAuthUser,
            http_auth_password: input.httpAuthPassword,
        };

        // remove null values
        _apiHelper.cleanObject(_form);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            form: _form,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    let response = '';
                    if (_context.response.body) {
                        response = JSON.parse(_context.response.body);
                    }
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'WebhooksResponse1');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else if (_response.statusCode === 400) {
                        const mappedObject = _baseController.getObjectMapper()
                            .mapObject(response, 'Webhooks400ErrorException');
                        mappedObject.reason = 'The bad response on webhook creation';
                        mappedObject.context = _context;
                        const _err = { errorMessage: 'The bad response on webhook creation',
                            errorCode: 400,
                            errorResponse: mappedObject };
                        _callback(_err, null, _context);
                        _reject(_err);
                    } else if (_response.statusCode === 401) {
                        const mappedObject = _baseController.getObjectMapper()
                            .mapObject(response, 'UnauthorizedException');
                        mappedObject.reason = 'Unauthorized response';
                        mappedObject.context = _context;
                        const _err = { errorMessage: 'Unauthorized response',
                            errorCode: 401,
                            errorResponse: mappedObject };
                        _callback(_err, null, _context);
                        _reject(_err);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
    /**
     * Deletes the specified webhook.
     *
     * @param {int} id The ID of the webhook to delete
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteExistingWebhook(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/webhooks/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        if (_oAuthManager.isTokenSet()) {
            return WebhooksController.deleteExistingWebhookAction(_queryUrl, _callback);
        }
        return _oAuthManager.authorize().then(
            () => WebhooksController.deleteExistingWebhookAction(_queryUrl, _callback),
            (err) => {
                _callback(err, null, null);
                return Promise.reject(err);
            });
    }
    static deleteExistingWebhookAction(_queryUrl, _callback) {
        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': _configuration.getUserAgent(),
        };

        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });
        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    let response = '';
                    if (_context.response.body) {
                        response = JSON.parse(_context.response.body);
                    }
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        let parsed = JSON.parse(_response.body);
                        parsed = _baseController.getObjectMapper().mapObject(parsed, 'BaseResponse');
                        _callback(null, parsed, _context);
                        _fulfill(parsed);
                    } else if (_response.statusCode === 401) {
                        const mappedObject = _baseController.getObjectMapper()
                            .mapObject(response, 'UnauthorizedException');
                        mappedObject.reason = 'Unauthorized response';
                        mappedObject.context = _context;
                        const _err = { errorMessage: 'Unauthorized response',
                            errorCode: 401,
                            errorResponse: mappedObject };
                        _callback(_err, null, _context);
                        _reject(_err);
                    } else if (_response.statusCode === 403) {
                        const mappedObject = _baseController.getObjectMapper()
                            .mapObject(response, 'BaseResponseErrorException');
                        mappedObject.reason = 'The webhook deletion forbidden response';
                        mappedObject.context = _context;
                        const _err = { errorMessage: 'The webhook deletion forbidden response',
                            errorCode: 403,
                            errorResponse: mappedObject };
                        _callback(_err, null, _context);
                        _reject(_err);
                    } else if (_response.statusCode === 404) {
                        const mappedObject = _baseController.getObjectMapper()
                            .mapObject(response, 'Webhooks400ErrorErrorException');
                        mappedObject.reason = 'The webhook deletion not found response';
                        mappedObject.context = _context;
                        const _err = { errorMessage: 'The webhook deletion not found response',
                            errorCode: 404,
                            errorResponse: mappedObject };
                        _callback(_err, null, _context);
                        _reject(_err);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
            return Promise.reject(err);
        });
    }
}
module.exports = WebhooksController;
