/**
 * PipedriveAPIV1Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of BaseUserMe
 */
class BaseUserMe extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.id = this.constructor.getValue(obj.id);
        this.name = this.constructor.getValue(obj.name);
        this.default_currency = this.constructor.getValue(obj.default_currency);
        this.locale = this.constructor.getValue(obj.locale);
        this.lang = this.constructor.getValue(obj.lang);
        this.email = this.constructor.getValue(obj.email);
        this.phone = this.constructor.getValue(obj.phone);
        this.activated = this.constructor.getValue(obj.activated);
        this.last_login = this.constructor.getValue(obj.last_login);
        this.created = this.constructor.getValue(obj.created);
        this.modified = this.constructor.getValue(obj.modified);
        this.signup_flow_variation = this.constructor.getValue(obj.signup_flow_variation);
        this.has_created_company = this.constructor.getValue(obj.has_created_company);
        this.is_admin = this.constructor.getValue(obj.is_admin);
        this.active_flag = this.constructor.getValue(obj.active_flag);
        this.timezone_name = this.constructor.getValue(obj.timezone_name);
        this.timezone_offset = this.constructor.getValue(obj.timezone_offset);
        this.role_id = this.constructor.getValue(obj.role_id);
        this.icon_url = this.constructor.getValue(obj.icon_url);
        this.is_you = this.constructor.getValue(obj.is_you);
        this.company_id = this.constructor.getValue(obj.company_id);
        this.company_name = this.constructor.getValue(obj.company_name);
        this.company_domain = this.constructor.getValue(obj.company_domain);
        this.language = this.constructor.getValue(obj.language);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'id', realName: 'id' },
            { name: 'name', realName: 'name' },
            { name: 'default_currency', realName: 'default_currency' },
            { name: 'locale', realName: 'locale' },
            { name: 'lang', realName: 'lang' },
            { name: 'email', realName: 'email' },
            { name: 'phone', realName: 'phone' },
            { name: 'activated', realName: 'activated' },
            { name: 'last_login', realName: 'last_login' },
            { name: 'created', realName: 'created' },
            { name: 'modified', realName: 'modified' },
            { name: 'signup_flow_variation', realName: 'signup_flow_variation' },
            { name: 'has_created_company', realName: 'has_created_company' },
            { name: 'is_admin', realName: 'is_admin' },
            { name: 'active_flag', realName: 'active_flag' },
            { name: 'timezone_name', realName: 'timezone_name' },
            { name: 'timezone_offset', realName: 'timezone_offset' },
            { name: 'role_id', realName: 'role_id' },
            { name: 'icon_url', realName: 'icon_url' },
            { name: 'is_you', realName: 'is_you' },
            { name: 'company_id', realName: 'company_id' },
            { name: 'company_name', realName: 'company_name' },
            { name: 'company_domain', realName: 'company_domain' },
            { name: 'language', realName: 'language', type: 'Language' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = BaseUserMe;
